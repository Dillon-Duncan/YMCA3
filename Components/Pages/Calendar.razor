@page "/calendar"

<div class="content px-4 d-flex flex-column justify-content-center align-items-center" style="height: 100vh; margin-bottom: 25px;">

    <div class="text-center mb-4">
        <h2>Calendar</h2>
    </div>

    <div class="d-flex justify-content-center align-items-center mb-3">
        <button class="btn btn-outline-primary me-2" @onclick="PreviousMonth">Previous</button>
        <h4 class="mb-0">@currentMonth.ToString("MMMM yyyy")</h4>
        <button class="btn btn-outline-primary ms-2" @onclick="NextMonth">Next</button>
    </div>

<div class="d-flex justify-content-center mb-4">
    <div class="table-responsive me-4" style="max-width: 80%;">
        <table class="table table-bordered text-center">
            <thead>
                <tr>
                    @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                    {
                        <th>@day</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var week in GetWeeksInMonth())
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            <td class="align-middle">
                                @if (day != null)
                                {
                                    <div class="day-number">@day.Value.Day</div>
                                    <ul class="list-unstyled">
                                        @foreach (var eventItem in GetEventsForDay(day.Value))
                                        {
                                            <li class="text-small text-primary">@eventItem.Title</li>
                                        }
                                    </ul>
                                }
                            </td>
                        }
                </tr>
                }
            </tbody>
        </table>
    </div>

    <div style="max-width: 40%;">
        <h5>Add Event</h5>
        <div class="form-group">
            <label for="eventDate">Event Date</label>
            <input type="date" id="eventDate" @bind="newEventDate" class="form-control" />
        </div>
        <div class="form-group">
            <label for="eventTitle">Event Title</label>
            <input type="text" id="eventTitle" @bind="newEventTitle" class="form-control" placeholder="Event Title" />
        </div>
        <button class="btn btn-primary mt-2" @onclick="AddEvent">Add Event</button>
    </div>
</div>
</div>

@code {
    private DateTime currentMonth = DateTime.Now;
    private DateTime newEventDate;
    private string newEventTitle;
    private List<EventItem> events = new();

    private void PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
    }

    private List<DateTime?>[] GetWeeksInMonth()
    {
        var weeks = new List<DateTime?>[6];
        for (int i = 0; i < 6; i++)
        {
            weeks[i] = new List<DateTime?>();
        }

        var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
        var startDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        int currentDay = 1;
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                if (i == 0 && j < startDayOfWeek || currentDay > daysInMonth)
                {
                    weeks[i].Add(null);
                }
                else
                {
                    weeks[i].Add(new DateTime(currentMonth.Year, currentMonth.Month, currentDay));
                    currentDay++;
                }
            }
        }

        return weeks;
    }

    private IEnumerable<EventItem> GetEventsForDay(DateTime day)
    {
        return events.Where(e => e.Date.Date == day.Date);
    }

    private void AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(newEventTitle) && newEventDate != default)
        {
            events.Add(new EventItem
            {
                Date = newEventDate,
                Title = newEventTitle
            });

            newEventDate = default;
            newEventTitle = string.Empty;
        }
    }

    private class EventItem
    {
        public DateTime Date { get; set; }
        public string Title { get; set; }
    }
}
